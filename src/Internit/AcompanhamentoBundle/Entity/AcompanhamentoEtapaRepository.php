<?php

namespace Internit\AcompanhamentoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Tupi\AdminBundle\Entity\CrudRepository;

/**
 * AcompanhamentoEtapaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AcompanhamentoEtapaRepository extends CrudRepository
{    
    public function listForm($filter = 0) {
        $qb = $this->getEntityManager()
            ->getConnection()
            ->executeQuery("SELECT aae.id as id, ae.id as etapa_id,ae.name, aae.valor, aae.visible FROM `acompanhamento_etapa` ae
                            LEFT OUTER JOIN `acompanhamento_acompanhamento_etapa` AS aae ON ae.id = aae.etapa_id AND aae.bloco_id = :filter 
            				ORDER BY ae.position ASC		
            		", array(
            "filter" => $filter
        ))
       ->fetchAll();
       return $qb;
    }
    
    public function findByBlocoAndEtapa($bloco, $etapa){
        $qb = $this->createQueryBuilder('a')
        ->join("a.bloco", "b")
        ->join("a.etapa", "e")
        ->where("b.id = :bloco_id")
        ->andWhere("e.id = :etapa_id")
        ->setParameter("bloco_id", $bloco)
        ->setParameter("etapa_id", $etapa);
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function atualizarPosicoes($etapa, $posicao)
    {   
        $qb = $this->createQueryBuilder('e')
            ->update()
            ->set('e.posicao', $posicao)
            ->where('e.etapa = :etapa')
            ->setParameter('etapa', $etapa)
            ->getQuery()
            ->execute();
        return $qb;
    }
}