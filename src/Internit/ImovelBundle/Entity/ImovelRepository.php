<?php

namespace Internit\ImovelBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Tupi\AdminBundle\Entity\CrudRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ImovelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImovelRepository extends CrudRepository
{
	
	public function findAllImoveis(){
		$qb = $this->createQueryBuilder("i")
		->select('i')
		->orderBy("i.position", "ASC");
		return $qb->getQuery()->getResult();
	}
	
	public function findByImovelStatus($status)
	{
		$qb = $this->createQueryBuilder("i")
		->select('i');
	
		if($status){
			$qb->join('i.status','s')
			->where('s.url=:url')
			->setParameter("url", $status)
			->addOrderBy("i.position", "ASC");
		}
		$qb->addOrderBy('i.id', 'DESC');
	
		return $qb->getQuery()->getResult();
	}
	
	public function listItens($key = 'item', $first = 0, $max = 10) {
			
		$builder = $this->createQueryBuilder($key);
		$builder->setFirstResult( $first );
		$builder->setMaxResults( $max );
		$builder->orderBy("{$key}.position","ASC");

		return $builder;
	}
		
	public function limitImovel($limit)
	{
		$qb = $this->createQueryBuilder("i")
		->select('i')
		->orderBy('i.createdAt', 'DESC')
		->setMaxResults($limit);
		 
		return $qb->getQuery()->getResult();
	}
	
	public function destaquesImovel($limit)
	{
		$qb = $this->createQueryBuilder("i")
		->select('i')
		->where('i.destaque = 1 AND (i.visible = 1 AND i.status IS NOT NULL)')
		->orderBy('i.position', 'ASC')
		->setMaxResults($limit);
			
		return $qb->getQuery()->getResult();
	}	

	public function OrderPosition($pos = "DESC")
	{
		$qb = $this->createQueryBuilder('po')
		->select('po')
		->orderBy('po.position', $pos);
			
		return $qb->getQuery()->getResult();
	}	
	
	public function lastPosition()
	{
		$qb = $this->createQueryBuilder('e')
		->select('e.position')
		->orderBy('e.position', 'DESC')
		->setMaxResults(1);
		 
		return $qb->getQuery()->getSingleResult();
	}
	
	public function getCount()
	{
		$qb = $this->createQueryBuilder('p')
		->select('count(p.id)');
	
		return $qb->getQuery()->getSingleScalarResult();
	}	
	
	public function findByStatus($status)
	{
	    $qb = $this->createQueryBuilder("i")
	    ->select('i')
	    ->join('i.status', 's')
	    ->where('i.visible = 1');
	    
	    if (!is_null($status)){
	       $qb->andWhere('s.status = :status')
	       ->setParameter('status', $status);
	    }else{
	       $qb->andWhere('s.status != :status')
	       ->setParameter('status', 'Obra Realizada');
	    }
	    
	    $qb->orderBy('i.position', 'ASC');
	    	
	    return $qb->getQuery()->getResult();
	}
	
	public function findByRealizados()
	{
	    $qb = $this->createQueryBuilder("i")
	    ->select('i')
	    ->join('i.status', 's')
	    ->where('i.visible = 1')
        ->andWhere('s.status = :status')
        ->setParameter('status', 'Obra Realizada')
        ->orderBy('i.done', 'desc');
	
	    return $qb->getQuery()->getResult();
	}
	
	public function totalImovelByStatus()
	{
	    $sql = "SELECT s.status , COUNT(*) AS total
                FROM imovel AS i
                LEFT JOIN imovel_status s ON i.status_id = s.id
	            WHERE s.status != 'Obra Realizada' 
                GROUP BY s.status";
	
	    $rsm = new ResultSetMapping;
	    $rsm->addScalarResult('status', 'status');
	    $rsm->addScalarResult('total', 'total');
	    $query = $this->_em->createNativeQuery($sql, $rsm);
	    return $query->getResult();
	}
	
	public function totalImovelByStatusMenu()
	{
	    $sql = "SELECT s.status , COUNT(i.status_id) AS total
            	FROM imovel AS i
            	RIGHT JOIN imovel_status s ON i.status_id = s.id
            	GROUP BY s.id";
	
	    $rsm = new ResultSetMapping;
	    $rsm->addScalarResult('status', 'status');
	    $rsm->addScalarResult('total', 'total');
	    $query = $this->_em->createNativeQuery($sql, $rsm);
	    return $query->getResult();
	}
	
	public function carregamentoSobDemandaImovel($page = 0, $status = ''){
		$qb = $this->createQueryBuilder("i")
		->select('i')
		->where('i.visible = 1')
		->join('i.status','s');
		
		if($status !=''){
			$qb->andWhere('s.url=:url')
			->setParameter("url", $status);			
		}else{
			$qb->andWhere('s.status != :status')
			->setParameter('status', 'Obra Realizada');
		}
		$qb->addOrderBy("i.position", "ASC")
		->setMaxResults(2)
		->setFirstResult($page);
		return $qb->getQuery()->getResult();
	}
	
	public function carregamentoSobDemandaObrasRealizadas(array $infor)
	{
		if(empty($infor['maxResult'])){
			$infor['maxResult'] = 3;
		}
		
		if(empty($infor['page'])){
			$infor['page'] = 0;
		}
		$page = $infor['page'] * $infor['maxResult'];
		
		$qb = $this->createQueryBuilder("i")
		->select('i')
		->join('i.status', 's')
		->where('i.visible = 1 and (s.status = :status or s.status = :statusPronto)')
		->setMaxResults($infor['maxResult'])
		->setFirstResult($page)
		->setParameter('status', 'Obra Realizada')
		->setParameter('statusPronto', 'Prontos')
		->orderBy('i.done', 'desc');
		
		return $qb->getQuery()->getResult();
	}
}