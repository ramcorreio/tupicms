<?php

namespace Internit\TrabalheBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Tupi\AdminBundle\Entity\CrudRepository;
use Tupi\AdminBundle\Types\StatusType;

/**
 * TrabalheRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrabalheRepository extends CrudRepository
{
    public function findPersonByEmail($email)
    {
        $qb = $this->_em->createQueryBuilder()
        ->select('p')
        ->from('InternitContactBundle:ContactPerson', 'p')
        ->where('p.email = :email')
        ->setParameter('email', $email);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function create(Trabalhe $cr)
    {
    	
        $person = $this->findPersonByEmail($cr->getPerson()->getEmail());
        $cr->setCreatedAt(new \DateTime());
        $cr->setUpdatedAt($cr->getCreatedAt());
        $cr->getPerson()->setUpdatedAt($cr->getCreatedAt());
        
        if(empty($person))
        {
            $cr->getPerson()->setCreatedAt(new \DateTime());
            $cr->getPerson()->setUpdatedAt($cr->getPerson()->getCreatedAt());
            $this->getEntityManager()->persist($cr->getPerson());
            //$this->getEntityManager()->persist($cr);
        }
        else 
        {

        	$person->setName($cr->getPerson()->getName());
            
            if($cr->getPerson()->getTelefone() != NULL)
                $person->setTelefone($cr->getPerson()->getTelefone());
            if($cr->getPerson()->getCelular() != NULL)
                $person->setCelular($cr->getPerson()->getCelular());
            if($cr->getPerson()->getNascimento() != NULL)
            	$person->setNascimento($cr->getPerson()->getNascimento());
            $person->setUpdatedAt(new \DateTime());
            $cr->setPerson($person);
            
            $this->getEntityManager()->merge($person);
            
        }
        
        $this->getEntityManager()->persist($cr);
        
        $this->getEntityManager()->flush();
        
    }    

    public function allSubjects()
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('count(p)')
    	->from('InternitTrabalheBundle:TrabalheSubject', 'p')
        ->where('p.status = :status')
        ->setParameter('status', StatusType::ACTIVE);;
    	
    	return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function lastGroupSelected($subjectId)
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('r.sentToGroup')
    	->from('InternitTrabalheBundle:Trabalhe', 'r')
    	->where('r.subject = :subject')
   		->orderBy('r.createdAt', 'DESC')
   		->setMaxResults(1)
    	->setParameter('subject', $subjectId);
    	
    	return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function listAllGroupsThisSubject($subjectId)
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('g.nome', 'g.id')
    	->from('InternitTrabalheBundle:TrabalheSubject', 's')
    	->join('s.groups', 'g')
    	->where('s.id = :subject')
   		->orderBy('g.id', 'ASC')
    	->setParameter('subject', $subjectId);
    	
    	return $qb->getQuery()->getResult();
    }
    
    public function listEmailsThisGroup($group)
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('e.email')
    	->from('InternitTrabalheBundle:TrabalheGroup', 'g')
    	->join('g.emails', 'e')
    	->where('g.nome = :group')
    	->setParameter('group', $group);
    	 
    	return $qb->getQuery()->getArrayResult();
    }

    public function getContacts()
    {
    	$connection = $this->_em->getConnection();
    	$contacts = $connection->prepare("SELECT p.nome, p.email, p.telefone, p.celular,  perg.message, perg.created_at
												FROM contact_person AS p
												JOIN contact_request AS perg
												WHERE p.id = perg.person_id
												ORDER BY perg.created_at desc");
    	$contacts->execute();
    	
    	return $results = $contacts->fetchAll();
    }    
}
