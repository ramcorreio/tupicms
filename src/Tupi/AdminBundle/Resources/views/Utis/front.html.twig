{% macro menu(root, attrs) %}

	{% set item = root %}
	{% set parent = null %}
	{% if attrs['root-class'] is defined and attrs['root-class'] is not empty %}
		{% set sclass = attrs['root-class'] %} 
	{% endif %}
	
	{{ block('item_menu_children') }}
{% endmacro %}

{% macro menuItem(item, attrs, parent) %}
	{% import 'TupiAdminBundle:Form:macros.html.twig' as admin %}
	
	{% set params = {'path' : (parent is null ? '' : parent ~ '/') ~ item.url} %}
	{% if item.redirect == false and item.templateName is null %}
		{% set params = {'_anchor' : false} %}
	{% endif %}
	
	{% set parent = item.url %}
	
	<li class="{% if attrs['item-class'] is defined and attrs['item-class'] is not empty %}{{ attrs['item-class'] }}{% endif %}{% if item.url == attrs['inSession'] %} {{ attrs['active'] }}{% endif %}">
		{{ admin.link('front_menu', item.title, null,  params) }}
		{{ block('item_menu_children') }}
	</li>
{% endmacro %}

{% block item_menu_children %}
{% import _self as forms %}
    {% if item.activeChildren is defined and item.activeChildren is not empty %}
    <ul {% if sclass is defined and sclass is not empty %} class="{{ sclass }}" {% endif %}>
    {% for submenu in item.activeChildren %}
        {{ forms.menuItem(submenu, attrs, parent) }}
    {% endfor %}
	</ul>
	{% endif %}
{% endblock item_menu_children %}

{% macro getMap(rua, cidade, estado, altura) %}
	{% if(rua == '' or cidade == '' or estado == '' or altura == '' ) %}
		<p style="font-weight: bold; font-size: 18px; color: red;">Erro ao carregar mapa!</p>
		<p style="font-size: 14px; font-style: italic; color: #000">Todos parâmetros da função são obrigatórios.</p>
    {% else %}
	    <script src="http://maps.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
		<div id="myMapByGoogleMaps" style="width: 100%; height: {{ altura }}px;"></div> 
		
		<script type="text/javascript">
			var rua = '{{ rua }}';
			var cidade = '{{ cidade }}';
			var estado = '{{ estado }}';
			rua.replace(',', '');
			rua.replace(' ', '_');
			cidade.replace(',', '');
			cidade.replace(' ', '_');
			estado.replace(',', '');
			estado.replace(' ', '_');
	
			var address = rua+', '+cidade+', '+estado; 
		   	var map = new google.maps.Map(document.getElementById('myMapByGoogleMaps'), { 
		       mapTypeId: google.maps.MapTypeId.ROADMAP,       
		       zoom: 15,
		       scrollwheel: false, //desabilita zoom com scroll
		       disableDefaultUI: true, //desabilita botoes no mapa
		   	});
		
		   	var geocoder = new google.maps.Geocoder();
		   	geocoder.geocode({
		      'address': address
		   	}, 
		   	function(results, status) {
		        if(status == google.maps.GeocoderStatus.OK) {
		      	  /* ######PARTE AONDE CLICA-SE NO MARKER E APARECE UM TEXTO NO BALÃO 
		      	  var infowindow = new google.maps.InfoWindow({
		      		    content: "<span>Texto Aqui</span>"
		      		}); */
		      	  var marker = new google.maps.Marker({
		                	position: results[0].geometry.location, //posição daonde o marker ficará
		      		    map: map,
		      		    animation: google.maps.Animation.DROP, //animacao do marker OUTRAS ANIMAÇÕES: BOUNCE, 
		      		    //icon: 'https://bit.ly/QIMos7', //icone do marker
		      		});
		      		/* ##### PARTE AONDE EXECUTA A FUNÇÃO DO CLICK NO MARKER PARA APARECER O TEXTO DO SPAN ACIMA
		      	  google.maps.event.addListener(marker, 'click', function() {
		      		  infowindow.open(map,marker);
		      		}); */
		           map.setCenter(results[0].geometry.location);
		        }
		     });
		  </script>
	{% endif %}
{% endmacro %}

	{#
		Macro para inserir o google maps com um ou mais marcadores.
		Parametros
		marks: Array bidimensional contendo address, textTop, textBody e icon.
		altura: altura da div.
		zoom: nivel de zoom no mapa.
		
		address: Endereço do marcador
		textTop: Texto na parte superior da mensagem do marcador. caso nao queira usar mensagem, nao precisa passar ela no array
		textBody: Texto na parte inferior da mensagem do marcador. caso nao queira usar, nao precisa passar ela no array
		icon: Caminho onde se encontra o marcador personalizado. Caso nao queira usar, nao precisa passar ela no array
		
		Exemplo:
		
		{% set marks = [
				['itaperuna,100','niteroi', 'RJ','','mensagem',asset('bundles/internitsitebase/media/img/icone-mapa.png')],
				['itaperuna 10','niteroi', 'RJ','titulo','mensagem',asset('bundles/internitsitebase/media/img/icone-mapa.png')]
				] %}
		{{ front.getMapMark(marks,435,15) }}
	#}
{% macro getMapMark(marks,altura,zoom) %}
	{% if marks is not defined or altura =='' or zoom =='' %}
	<p style="font-weight: bold; font-size: 18px; color: red;">Erro ao carregar mapa!</p>
	<p style="font-size: 14px; font-style: italic; color: #000">Todos os parâmetros são obrigatórios.</p>
    {% else %}
	<script src="http://maps.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
	<div id="myMapByGoogleMaps" style="width: 100%; height: {{ altura }}px;"></div>
	
	<script type="text/javascript">
			var creatMapView;
			var markersData = [
				{% for marksData in marks %}
				{
					address : '{{ marksData[0] ~ ',' ~ marksData[1] ~ ',' ~ marksData[2]  }}',
					textTop: '{{ marksData[3] }}',
					textBody: '{{ marksData[4] }}',
					icon : '{{ marksData[5] }}'
				},
				{% endfor %}
			];
	
			function initialize() {
				setElement = document.getElementById('myMapByGoogleMaps');
				var mapOptions = {
						mapTypeId: google.maps.MapTypeId.ROADMAP,       
						zoom: 15,
						scrollwheel: false, //desabilita zoom com scroll
						disableDefaultUI: true, //desabilita botoes no mapa
					};
				if(typeof markersData === "undefined"){
					console.log("Por favor, crie o objeto markersData");
				}else{
					try{
						creatMapView = new google.maps.Map(setElement, mapOptions);
						for(var x in markersData){
							x == 0 ? getMarker(markersData[x],true) : getMarker(markersData[x],false);
						}
					}catch(err){
						console.log(err.message);
					}
				}
	
			}
	
			google.maps.event.addDomListener(window, 'load', initialize);
	
			function getMarker(markerData,center){
				var geocoder = new google.maps.Geocoder();
				geocoder.geocode({
						'address': markerData.address
					}, 
					function(results, status) {
						if(status == google.maps.GeocoderStatus.OK) {
							var marker = new google.maps.Marker({
								position: results[0].geometry.location, //posição daonde o marker ficará
								map: creatMapView,
								animation: google.maps.Animation.DROP, //animacao do marker OUTRAS ANIMAÇÕES: BOUNCE, 
							});
							if(markerData.textTop != '' && typeof markerData.textTop === "string"){
								var content = '<div class="map_content">';
								content += '<h4>' + markerData.textTop +'</h4>';
								if(typeof markerData.textBody !== "undefined"){
									content += '<span>' + markerData.textBody + '</span>';
								}
								content += '</div>';
								var infowindow = new google.maps.InfoWindow({
									content: content
								});
								google.maps.event.addListener(marker, 'click', function() {
								infowindow.open(creatMapView,marker);
								}); 
							}
							marker.setIcon(markerData.icon);
	
							if(center){
								creatMapView.setCenter(results[0].geometry.location);
							}
						}
				});
			}
	</script>
	{% endif %}
{% endmacro %}