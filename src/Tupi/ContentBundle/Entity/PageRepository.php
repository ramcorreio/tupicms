<?php

namespace Tupi\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use Tupi\ContentBundle\Types\PageStatusType;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;

use Tupi\AdminBundle\Entity\CrudRepository;
use Tupi\ContentBundle\EventListener\ImageMediaRemoveListener;
use Tupi\ContentBundle\EventListener\PageListener;
use Doctrine\ORM\NoResultException;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends CrudRepository
{
	public function getPageFromUrl($url)
    {
        $qb = $this->createQueryBuilder('p')
        ->select('p')
        ->andWhere('p.url = :url')
        ->andWhere('p.status = :status')
        ->setParameter('status', PageStatusType::PUBLISHED)
        ->setParameter('url', $url);
    
        try{
        	return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            throw new ResourceNotFoundException("Mapeamento $url nÃ£o encontrado.");
		}
    }
    
    public function removePageUseImage(ImageMedia $media) 
    {
    	$qb = $this->createQueryBuilder('p')
    	->select('p')
    	->join('p.images', 'i')
    	->andWhere('i.id = :id')
    	->setParameter('id', $media->getId());
    	
    	foreach ($qb->getQuery()->getResult() as $page)
    	{
    		$page->getImages()->removeElement($media);
    		$page->setUpdatedAt(new \DateTime());
    		$this->_em->merge($page);
    	}
    }
}